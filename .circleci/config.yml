version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      wkfl_id:
        type: string
      when:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: << parameters.when >>
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.wkfl_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.wkfl_id >>
            aws s3 rm s3://udapeople-<< parameters.wkfl_id >> --recursive
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      wkfl_id:
        type: string
      when:
        type: string   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: << parameters.when >>
          working_directory: ./backend
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_<< parameters.wkfl_id >>)
            echo $SUCCESS
            if(( $SUCCESS=="success" )); 
            then
            #  cd ~/project/backend
               npm install
            #  Add revert code here. You can find this in the Getting Started section.
               npm run migrations:revert
            fi
parameters:
  circleci_image:
    type: string
    default: circleci/node:latest
  py_alp_image:
    type: string
    default: python:3.7-alpine3.11

orbs:
  slack: circleci/slack@3.4.2  # for slack integration to https://udapeople.slack.com; reference: https://circleci.com/blog/continuous-integration-slack-twilio/

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            npm install oauth-sign
      - run:
          name: Compile the code
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/status

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Compile the code
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/status

  test-frontend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install Frontend deps
          command: |
            cd frontend
            npm install
            npm install oauth-sign
      - run:
          name: Test code
          command: |
            cd frontend
            npm run test
      - slack/status

  test-backend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install Backend deps
          command: |
            cd backend
            npm install
      - run:
          name: Test code
          command: |
            cd backend
            npm run test
      - slack/status
            
  scan-frontend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install Frontend deps
          command: |
            cd frontend
            npm install
            npm install oauth-sign
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/status

  scan-backend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install Backend deps
          command: |
            cd backend
            npm install
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/status

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install Dependencies for Persistence
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Fetch and Save Backend URL
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
                 --query 'Reservations[*].Instances[*].PublicIpAddress' \
                 --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
                 --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
  configure-infrastructure:
    docker:
      - image: << pipeline.parameters.py_alp_image >>
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ["d6:c5:72:d7:85:64:aa:e9:a1:92:21:06:1e:d9:1a:13:0b:3d:7a:45"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            # Your code here
            apk add --update ansible
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  run-migrations:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            # Your code here
            npm install
            npm run migrations > backend_migration_status
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            # Your code here
            if grep -q "has been executed successfully" backend_migration_status
            then
              echo "Migration OK, updating memstash..."
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "MIGRATION_OK" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo "Migration failed, verify configuration!"
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "MIGRATION_FAILED" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
            echo "wkfl_id=${CIRCLE_WORKFLOW_ID}"
     # Here's where you will add some code to rollback on failure
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - revert-migrations:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  deploy-frontend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get update && sudo apt-get install -yy less tar gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL=$(curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            # your code here
            npm run build
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  deploy-backend:
    docker:
      - image: << pipeline.parameters.py_alp_image >>
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ["d6:c5:72:d7:85:64:aa:e9:a1:92:21:06:1e:d9:1a:13:0b:3d:7a:45"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            # your code here
            cd /tmp
            apk add --update ansible curl rsync openssh nodejs npm
            pip install awscli 
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            # your code here
            ansible-playbook -i inventory deploy-server.yaml -vv
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - revert-migrations:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  smoke-test:
    docker:
      - image: << pipeline.parameters.py_alp_image >> 
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
